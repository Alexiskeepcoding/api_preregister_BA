generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id                Int                @id @default(autoincrement())
  stateRegistration stateRegistration  @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  address           Address?
  certificates      Certificates?
  coordinates       Coordinates?
  dependentsBenefit DependentsBenefit?
  email             Email?
  motive            Motive?
  nameOrganization  NameOrganization?
  numPreRegister    NumPreRegister?
  phone             Phone?
  purpose           Purpose?
  representative    Representative?
  ruc               Ruc?
}

model NameOrganization {
  id                 Int           @id @default(autoincrement())
  text               String
  state              Boolean
  nameOrganizationId Int?          @unique
  organization       Organization? @relation(fields: [nameOrganizationId], references: [id], onDelete: Cascade)
}

model Ruc {
  id           Int          @id @default(autoincrement())
  text         Int
  state        Boolean
  rucId        Int          @unique
  organization Organization @relation(fields: [rucId], references: [id], onDelete: Cascade)
}

model Phone {
  id           Int          @id @default(autoincrement())
  text         String
  state        Boolean
  phoneId      Int          @unique
  organization Organization @relation(fields: [phoneId], references: [id], onDelete: Cascade)
}

model Email {
  id           Int          @id @default(autoincrement())
  text         String
  state        Boolean
  emailId      Int          @unique
  organization Organization @relation(fields: [emailId], references: [id], onDelete: Cascade)
}

model Purpose {
  id           Int          @id @default(autoincrement())
  text         String
  state        Boolean
  purposeId    Int          @unique
  organization Organization @relation(fields: [purposeId], references: [id], onDelete: Cascade)
}

model DependentsBenefit {
  id                  Int           @id @default(autoincrement())
  text                Int
  state               Boolean
  dependentsBenefitId Int           @unique
  beneficiaries       Beneficiary[]
  organization        Organization  @relation(fields: [dependentsBenefitId], references: [id], onDelete: Cascade)
}

model Beneficiary {
  id                  Int                @id @default(autoincrement())
  age                 Int
  gender              String
  phoneNumber         String
  dependentsBenefitId Int?
  addressId           Int?
  address             Address?           @relation(fields: [addressId], references: [id])
  dependentsBenefit   DependentsBenefit? @relation(fields: [dependentsBenefitId], references: [id])
}

model Motive {
  id           Int          @id @default(autoincrement())
  text         String
  state        Boolean
  motiveId     Int          @unique
  organization Organization @relation(fields: [motiveId], references: [id], onDelete: Cascade)
}

model NumPreRegister {
  id               Int          @id @default(autoincrement())
  text             Int
  state            Boolean
  numPreRegisterId Int          @unique
  organization     Organization @relation(fields: [numPreRegisterId], references: [id], onDelete: Cascade)
}

model Certificates {
  id                  Int                @id @default(autoincrement())
  organizationId      Int                @unique
  iessCertificationId Int?               @unique
  sriCertificateId    Int?               @unique
  iessCertificate     IESSCertification? @relation("IESScertification", fields: [iessCertificationId], references: [id], onDelete: Cascade)
  organization        Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sriCertificate      SRICertification?  @relation("SRICertification", fields: [sriCertificateId], references: [id], onDelete: Cascade)
}

model IESSCertification {
  id           Int           @id @default(autoincrement())
  imageurl     String
  state        Boolean
  updatedat    DateTime      @updatedAt
  certificates Certificates? @relation("IESScertification")
}

model SRICertification {
  id           Int           @id @default(autoincrement())
  imageurl     String
  state        Boolean
  updatedat    DateTime      @updatedAt
  certificates Certificates? @relation("SRICertification")
}

model Address {
  id             Int           @id @default(autoincrement())
  organizationId Int           @unique
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  beneficiaries  Beneficiary[]
  city           City?
  country        Country?
  neighborhood   Neighborhood?
  province       Province?
  street         Street?
}

model Street {
  id       Int     @id @default(autoincrement())
  text     String
  state    Boolean
  streetId Int     @unique
  address  Address @relation(fields: [streetId], references: [id], onDelete: Cascade)
}

model City {
  id      Int     @id @default(autoincrement())
  text    String
  state   Boolean
  cityId  Int     @unique
  address Address @relation(fields: [cityId], references: [id], onDelete: Cascade)
}

model Neighborhood {
  id             Int     @id @default(autoincrement())
  text           String
  state          Boolean
  neighborhoodId Int     @unique
  address        Address @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade)
}

model Province {
  id         Int     @id @default(autoincrement())
  text       String
  state      Boolean
  provinceId Int     @unique
  address    Address @relation(fields: [provinceId], references: [id], onDelete: Cascade)
}

model Country {
  id        Int     @id @default(autoincrement())
  text      String
  state     Boolean
  countryId Int     @unique
  address   Address @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model Coordinates {
  id             Int          @id @default(autoincrement())
  latitude       String
  longitude      String
  organizationId Int          @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Representative {
  id                  Int                  @id @default(autoincrement())
  organizationId      Int                  @unique
  emailRepresentative EmailRepresentative?
  name                Name?
  numDoc              NumDoc?
  phoneRepresentative PhoneRepresentative?
  organization        Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role                Role?
}

model Name {
  id             Int            @id @default(autoincrement())
  text           String
  state          Boolean
  nameId         Int            @unique
  representative Representative @relation(fields: [nameId], references: [id], onDelete: Cascade)
}

model NumDoc {
  id             Int            @id @default(autoincrement())
  text           String
  state          Boolean
  numDocId       Int            @unique
  representative Representative @relation(fields: [numDocId], references: [id], onDelete: Cascade)
}

model Role {
  id             Int            @id @default(autoincrement())
  text           String
  state          Boolean
  roleId         Int            @unique
  representative Representative @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model EmailRepresentative {
  id             Int            @id @default(autoincrement())
  text           String
  state          Boolean
  emailId        Int            @unique
  representative Representative @relation(fields: [emailId], references: [id], onDelete: Cascade)
}

model PhoneRepresentative {
  id             Int            @id @default(autoincrement())
  text           String
  state          Boolean
  phoneId        Int            @unique
  representative Representative @relation(fields: [phoneId], references: [id], onDelete: Cascade)
}

enum stateRegistration {
  PENDING
  REVIEW
  APPROVED
  REJECTED
}
