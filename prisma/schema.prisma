generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id                Int               @id @default(autoincrement())
  stateRegistration stateRegistration @default(PENDING)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  nameOrganization NameOrganization?
  ruc              Ruc?
  phone            Phone?
  email            Email?
  purpose          Purpose?
  motive           Motive?
  coordinates      Coordinates?

  representative      Representative?
  beneficiaryDocument BeneficiaryDocumentProof?
  numPreRegister      NumPreRegister?
  address             Address?
  certificates        Certificate?
}

model NameOrganization {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  organization       Organization @relation(fields: [nameOrganizationId], references: [id], onDelete: Cascade)
  nameOrganizationId Int          @unique

  @@unique([id, nameOrganizationId])
}

model Ruc {
  id            Int    @id @default(autoincrement())
  rucText       String
  documentProof  Bytes //This is BLOB

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Phone {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Email {
  id             Int          @id @default(autoincrement())
  text           String
  state          Boolean
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Purpose {
  id             Int          @id @default(autoincrement())
  text           String
  state          Boolean
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model BeneficiaryDocumentProof {
  id            Int    @id @default(autoincrement())
  documentProof  Bytes //This is BLOB based

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Motive {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model NumPreRegister {
  id    Int     @id @default(autoincrement())
  text  Int
  state Boolean

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Certificate {
  id Int @id @default(autoincrement())

  iessCertificate IESSCertification?
  sriCertificate  SRICertification?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model IESSCertification {
  id        Int      @id @default(autoincrement())
  imageurl  String
  state     Boolean
  updatedat DateTime @updatedAt

  certificates        Certificate @relation(fields: [iessCertificationId], references: [id], onDelete: Cascade)
  iessCertificationId Int         @unique

  @@unique([id, iessCertificationId])
}

model SRICertification {
  id        Int      @id @default(autoincrement())
  imageurl  String
  state     Boolean
  updatedat DateTime @updatedAt

  certificates  Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
  certificateId Int         @unique

  @@unique([id, certificateId])
}

model Address {
  id           Int           @id @default(autoincrement())
  city         City?
  country      Country?
  neighborhood Neighborhood?
  province     Province?
  street       Street?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Street {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address        Address @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int     @unique

  @@unique([id, organizationId])
}

model City {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address        Address @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int     @unique

  @@unique([id, organizationId])
}

model Neighborhood {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address        Address @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int     @unique

  @@unique([id, organizationId])
}

model Province {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address        Address @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int     @unique

  @@unique([id, organizationId])
}

model Country {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address        Address @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int     @unique

  @@unique([id, organizationId])
}

model Coordinates {
  id        Int    @id @default(autoincrement())
  latitude  String
  longitude String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Representative {
  id                  Int                  @id @default(autoincrement())
  emailRepresentative EmailRepresentative?
  name                Name?
  numDoc              NumDoc?
  phoneRepresentative PhoneRepresentative?
  role                Role?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique

  @@unique([id, organizationId])
}

model Name {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int            @unique

  @@unique([id, organizationId])
}

model NumDoc {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int            @unique

  @@unique([id, organizationId])
}

model Role {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int            @unique

  @@unique([id, organizationId])
}

model EmailRepresentative {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int            @unique

  @@unique([id, organizationId])
}

model PhoneRepresentative {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int            @unique

  @@unique([id, organizationId])
}

enum stateRegistration {
  PENDING
  REVIEW
  APPROVED
  REJECTED
}
